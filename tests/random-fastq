#!/usr/bin/env python3

import argparse
from random import randint, SystemRandom, choice
import string
from sys import exit

version = '0.1a 2016-02-15'

# Set up & parse the command line arguments:
parser = argparse.ArgumentParser(description = 'Generate random FASTQ reads', fromfile_prefix_chars='@')
parser.add_argument('-v', '--version', action='version', version='%(prog)s {0}'.format(version))
parser.add_argument('-n', '--number', dest='number', type=int, default=1, help='Number of reads to generate')
seq_type = parser.add_argument_group('Sequence types')
seq_type.add_argument('--quality', dest='quality', choices=['sanger', 'solexa', 'illumina'], default='s', help='FASTQ encoding type')
seq_type.add_argument('--uppercase', dest='uppercase', action='store_true', default=False, help='allow uppercase bases')
seq_type.add_argument('--lowercase', dest='lowercase', action='store_true', default=False, help='allow lowercase bases')
seq_type.add_argument('--dna', dest='dna', action='store_true', default=False, help='allow DNA bases')
seq_type.add_argument('--rna', dest='rna', action='store_true', default=False, help='allow RNA bases')
seq_type.add_argument('--ambiguous', dest='ambiguous', action='store_true', default=False, help='allow ambiguous bases')
seq_type.add_argument('--mask', dest='mask', action='store_true', default=False, help='allow mask base characters')
read_metrics = parser.add_argument_group('Read metrics')
read_metrics.add_argument('--seq-min', dest='seq_min', type=int, default=0, help='sequence minimum length')
read_metrics.add_argument('--seq-max', dest='seq_max', type=int, default=100, help='sequence maximum length')
read_metrics.add_argument('--secondary-header', dest='secondary_header', action='store_true', default=False, help='repeat header')
read_metrics.add_argument('--header-prefix', dest='header_prefix', default='read_', help='header prefix string')
args = parser.parse_args()

# Simple error message:
def error(message): exit('ERROR: {}'.format(message))

# Generate a random string for a list of characters:
def randomSequence(characters, n): return ''.join(SystemRandom().choice(characters) for _ in range(n))

# Class to construct valid nucleotide strings:
class bases:
    DNA = set('ACGTN')
    RNA = set('ACGUN')
    ambiguous = set('RYKMSWBDHV')
    mask = set('X')
    uppercase = set(['uppercase'])
    lowercase = set(['lowercase'])
    def characterSet(bases, case):
        output = []
        if 'uppercase' in case: output.extend([base.upper() for base in bases])
        if 'lowercase' in case: output.extend([base.lower() for base in bases])
        return output

# Class to hold valid quality encoding characters:
class quality:
    sanger = list('''!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~''')
    solexa = list(''';<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~''')
    sanger = list('''@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~''')

# Class to yield random reads:
class Read:
    header_chars = string.digits + string.ascii_letters + string.punctuation
    def __init__(self, baseChars, qualChars, seqRange=range(0, 101), headRange=range(1, 51), headPrefix='read_', repeatHeader=False):
        self.baseChars = baseChars
        self.qualChars = qualChars
        self.seqRange = seqRange
        self.headerRange = headRange
        self.headerPrefix = headPrefix
        self.repeatHeader = repeatHeader
    def makeRead(self, repeat_header=False):
        header_length = choice(self.headerRange)
        sequence_length = choice(self.seqRange)
        header = '{}{}'.format(self.headerPrefix, randomSequence(Read.header_chars, header_length))
        sequence = randomSequence(self.baseChars, sequence_length)
        quality = randomSequence(self.qualChars, sequence_length)
        output = []
        output.append('@{}'.format(header))
        output.append(sequence)
        if self.repeatHeader == True: output.append('+{}'.format(header))
        else: output.append('+')
        output.append(quality)
        return '\n'.join(output)
    def __str__(self): return self.makeRead()

# Set the read type:
if args.quality == 'illumina': qualChars = quality.illumina
elif args.quality == 'solexa': qualChars = quality.solexa
else: qualChars = quality.sanger

# Set the valid character set:
b = set()
case = set()
if args.dna == True: b |= bases.DNA
if args.rna == True: b |= bases.RNA
if args.ambiguous == True: b |= bases.ambiguous
if args.mask == True: b |= bases.mask
if args.uppercase == True: case |= bases.uppercase
if args.lowercase == True: case |= bases.lowercase
if len(b) == 0: error('no valid sequence bases selected')
if len(case) == 0: error('at least one of uppercase (-u) and lowercase (-l) must be specified')
seqChars = bases.characterSet(b, case)

# Set up the random read:
r = Read(baseChars=seqChars, qualChars=qualChars, seqRange=range(args.seq_min, args.seq_max + 1), headRange=range(0, 51), headPrefix=args.header_prefix, repeatHeader=args.secondary_header)

# Generate the required number of reads:
for i in range(args.number): print(r)
